{"version":3,"sources":["hooks/useFormState.js","components/EditingForm.js","components/TodoItems.js","components/TodoList.js","components/Form.js","hooks/useLocalStorage.js","components/TodoApp.js","App.js","index.js"],"names":["useFormState","initState","useState","state","setState","event","target","value","EditingForm","task","id","editTodo","handleChange","reset","className","onSubmit","e","preventDefault","type","onChange","autoFocus","icon","faEdit","TodoItems","props","completed","showEditingForm","removeTodo","toggleTodo","toggleEditingForm","onClick","faCheck","faTrash","TodoList","todos","TransitionGroup","component","map","todo","CSSTransition","classNames","timeout","Form","addTodo","placeholder","faPlus","useLocalStorage","key","val","JSON","parse","window","localStorage","getItem","length","useEffect","setItem","stringify","TodoApp","uuidv4","setTodos","newText","updatedTodos","filter","newTask","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af312606.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction useFormState(initState) {\n  const [state, setState] = useState(initState);\n\n  const handleChange = (event) => {\n    setState(event.target.value);\n  };\n\n  const reset = () => {\n    setState(\"\");\n  };\n\n  return [state, handleChange, reset];\n}\n\nexport default useFormState;\n","import React from \"react\";\nimport useFormState from \"../hooks/useFormState\";\nimport \"../css/EditingForm.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction EditingForm({ task, id, editTodo }) {\n  const [value, handleChange, reset] = useFormState(task);\n\n  return (\n    <form\n      className=\"EditingForm\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        reset();\n        editTodo(value, id);\n      }}\n    >\n      <label>\n        <input type=\"text\" value={value} onChange={handleChange} autoFocus />\n      </label>\n      <button className=\"edit\" type=\"submit\">\n        <FontAwesomeIcon icon={faEdit} />\n      </button>\n    </form>\n  );\n}\n\nexport default EditingForm;\n","import React from \"react\";\nimport EditingForm from \"./EditingForm\";\nimport \"../css/TodoItems.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faEdit, faCheck } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction TodoItems(props) {\n  const {\n    task,\n    id,\n    completed,\n    showEditingForm,\n    removeTodo,\n    toggleTodo,\n    editTodo,\n    toggleEditingForm,\n  } = props;\n\n  return (\n    <li className={`TodoItems ${showEditingForm ? \"isEditing\" : \"\"}`}>\n      {showEditingForm ? (\n        <EditingForm editTodo={editTodo} task={task} id={id} />\n      ) : (\n        <>\n          <div className=\"left\">\n            <button\n              className={`check ${completed ? \"isChecked\" : \"\"}`}\n              onClick={() => toggleTodo(id)}\n            >\n              <FontAwesomeIcon icon={faCheck} />\n            </button>\n            <p className={`task ${completed ? \"isChecked\" : \"\"}`}>{task}</p>\n          </div>\n          <div className=\"right\">\n            <button className=\"delete\" onClick={() => removeTodo(id)}>\n              <FontAwesomeIcon className=\"delete_icon\" icon={faTrash} />\n            </button>\n            <button className=\"edit\" onClick={() => toggleEditingForm(id)}>\n              <FontAwesomeIcon icon={faEdit} />\n            </button>\n          </div>\n        </>\n      )}\n    </li>\n  );\n}\n\nexport default TodoItems;\n","import React from \"react\";\nimport TodoItems from \"./TodoItems\";\nimport \"../css/TodoList.css\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nfunction TodoList(props) {\n  const { todos, removeTodo, toggleTodo, editTodo, toggleEditingForm } = props;\n\n  return (\n    <TransitionGroup className=\"TodoList\" component={\"ul\"}>\n      {todos.map((todo) => (\n        <CSSTransition key={todo.id} classNames=\"fade\" timeout={300}>\n          <TodoItems\n            task={todo.task}\n            key={todo.id}\n            id={todo.id}\n            completed={todo.completed}\n            showEditingForm={todo.showEditingForm}\n            removeTodo={removeTodo}\n            toggleTodo={toggleTodo}\n            editTodo={editTodo}\n            toggleEditingForm={toggleEditingForm}\n          />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport useFormState from \"../hooks/useFormState\";\nimport \"../css/Form.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction Form({ addTodo }) {\n  const [value, handleChange, reset] = useFormState(\"\");\n\n  return (\n    <form\n      className=\"Form\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        addTodo(value);\n        reset();\n      }}\n    >\n      <label>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={handleChange}\n          placeholder=\"What do you need to do?\"\n        />\n      </label>\n      <button type=\"submit\">\n        <span>\n          <FontAwesomeIcon icon={faPlus} />\n        </span>\n        Add New Todo\n      </button>\n    </form>\n  );\n}\n\nexport default Form;\n","import { useState, useEffect } from \"react\";\n\nfunction useLocalStorage(key, initState) {\n  const [state, setState] = useState(() => {\n    const val = JSON.parse(window.localStorage.getItem(key));\n    return val.length ? val : initState;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state, key]);\n\n  return [state, setState];\n}\n\nexport default useLocalStorage;\n","import React from \"react\";\nimport TodoList from \"./TodoList\";\nimport Form from \"./Form\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport \"../css/TodoApp.css\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nfunction TodoApp() {\n  const initState = [\n    {\n      task: \"I don't know what to do...\",\n      id: uuidv4(),\n      completed: false,\n      showEditingForm: false,\n    },\n  ];\n\n  const [todos, setTodos] = useLocalStorage(\"items\", initState);\n\n  const addTodo = (newText) => {\n    if (newText === \"\") return;\n    setTodos([\n      ...todos,\n      { task: newText, id: uuidv4(), completed: false, showEditingForm: false },\n    ]);\n  };\n\n  const removeTodo = (id) => {\n    const updatedTodos = todos.filter((todo) => todo.id !== id);\n    setTodos(updatedTodos);\n  };\n\n  const toggleTodo = (id) => {\n    const updatedTodos = todos.map((todo) =>\n      todo.id === id ? { ...todo, completed: !todo.completed } : todo\n    );\n    setTodos(updatedTodos);\n  };\n\n  const editTodo = (newTask, id) => {\n    let updatedTodos;\n\n    if (newTask === \"\") {\n      updatedTodos = todos.map((todo) =>\n        todo.id === id ? { ...todo, showEditingForm: false } : todo\n      );\n    } else {\n      updatedTodos = todos.map((todo) =>\n        todo.id === id\n          ? { ...todo, task: newTask, showEditingForm: false }\n          : todo\n      );\n    }\n    setTodos(updatedTodos);\n  };\n\n  const toggleEditingForm = (id) => {\n    const updatedTodos = todos.map((todo) =>\n      todo.id === id\n        ? { ...todo, showEditingForm: true }\n        : { ...todo, showEditingForm: false }\n    );\n    setTodos(updatedTodos);\n  };\n\n  return (\n    <div className=\"TodoApp\">\n      <Form addTodo={addTodo} />\n      <TodoList\n        todos={todos}\n        removeTodo={removeTodo}\n        toggleTodo={toggleTodo}\n        editTodo={editTodo}\n        toggleEditingForm={toggleEditingForm}\n      />\n    </div>\n  );\n}\n\nexport default TodoApp;\n","import TodoApp from \"./components/TodoApp\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <h1>React Todo App</h1>\n      <TodoApp />\n    </main>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}